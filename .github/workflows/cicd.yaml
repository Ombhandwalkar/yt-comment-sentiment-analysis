# name: CICD Pipeline

# on: push

# jobs:
#   model-deployment:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code # This will fetch our code to Github
#         uses: actions/checkout@v3   # You are telling GitHub Actions to use the official version3

#       - name: Set up Python 
#         uses: actions/setup-python@v4 # Setting up python
#         with:
#           python-version: '3.10'
        
#       - name: Cache pip  dependencies  # Caching the dependencies
#         uses: actions/cache@v3 
#         with:
#           path: ~/.cache/pip 
#           key: ${{runner.os}}-pip-${{hashFiles('requirements.txt')}}
#           restore-keys: |
#             ${{runner.os}}-pip- 

#       - name: Install dependencies
#         run: 
#           pip install -r requirements.txt 

#       - name: Run Pipeline  # Running our pipeline
#         env:
#           AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
#           AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
#           AWS_DEFAULT_REGION: eu-north-1
#         run: |
#           dvc repro 
# # So after Push, there some changes occur in DVC side (liken in dvc.lock) so we need to push DVC on server

#       - name: Push DVC-tracked data to remote 
#         env:
#           AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
#           AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
#           AWS_DEFAULT_REGION: eu-north-1
#         run: |
#           dvc push 

# # We are telling GitHub-actions[BOT] to do this work on be-half with our permission     
#       - name: Configure Git
#         run: |
#           git config --global user.name "github-actions[bot]"
#           git config --global user.email "github-actions[bot]@users.noreply.github.com"

#       - name: Add changes to Git 
#         run: |
#           git add .
 
#       - name: Commit changes
#         if: ${{github.actor != 'github-actions[bot]'}}
#         run: |
#           git commit -m "Automated commit of DVC outputs and updated code " || echo "No changes to commit"

# # We are telling model dont trigger the continuous integration again.
# # If we don't do this it will run Infinite times.  
#       - name: Push Changes 
#         if: ${{github.actor != 'github-actions[bot]'}}
#         env: 
#           GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
#         run: |
#           git push origin ${{github.ref_name}}

# # We are going to Test our model.
#       - name: Instal test dependencies 
#         run: |
#           pip install pytest 
        
# # Test for- to load model
#       - name: Run model loading test
#         env:
#           AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
#           AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
#           AWS_DEFAULT_REGION: eu-north-1
#         run: |
#           pytest scripts/test_load_model.py 
  
# # We are doing Signature test on model
#       - name: Run model signature test
#         env:
#           AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
#           AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
#           AWS_DEFAULT_REGION: eu-north-1
#         run: |
#           pytest scripts/test_model_signature.py 

# # Check model's performance  
#       - name: Run model performance test
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: us-east-1
#         run: |
#           pytest scripts/test_model_performance.py

# # Promote model to production
#       - name: Promote model to production
#         if: success()
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: us-east-1
#         run: python scripts/promote_model.py

# # Login to AWS ECR for Docker deploy
#       - name: Login to AWS ECR
#         if: success()
#         run: |
#           aws configure set aws_access_key_id ${{secrets.AWS_ACCESS_KEY_ID}}
#           aws configure set aws_secret_access_key ${{secrets.AWS_SECRET_ACCESS_KEY}}
#           aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/n4j8b0m8
        
# # Build the Docker image
#       - name: Build Docker image 
#         if: success()
#         run: |
#           docker build -t yt-analytics-chat-bot .
  
# # Tag the Docker image
#       - name: Tag Docker image 
#         if: success()
#         run: |
#           docker tag yt-analytics-chat-bot:latest public.ecr.aws/n4j8b0m8/yt-analytics-chat-bot:latest

# #  Push Docker image to AWS ECR
#       - name: Push Docker image to AWS ECR 
#         if: success()
#         run: |
#           docker push public.ecr.aws/n4j8b0m8/yt-analytics-chat-bot:latest
      
      
#        # Zip the required files
#       - name: Zip files for deployment
#         if: success()
#         run: |
#           zip -r deployment.zip appspec.yml deploy/scripts/install_dependencies.sh deploy/scripts/start_docker.sh

#       # Upload the ZIP file to S3
#       - name: Upload ZIP to S3
#         if: success()
#         run: |
#           aws s3 cp deployment.zip s3://code-deploy-bucket-yt-app/deployment.zip

#       # Deploy to AWS CodeDeploy using the uploaded ZIP file
#       - name: Deploy to AWS CodeDeploy
#         if: success()
#         run: |
#           aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws deploy create-deployment \
#             --application-name YT-Analytics \
#             --deployment-config-name CodeDeployDefault.OneAtATime \
#             --deployment-group-name YT-Analytics-deployment \
#             --s3-location bucket=code-deploy-bucket-yt-app,key=deployment.zip,bundleType=zip \
#             --file-exists-behavior OVERWRITE \
#             --region eu-north-1  